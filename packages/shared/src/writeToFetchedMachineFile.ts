import { existsSync } from 'fs';
import * as fs from 'fs/promises';
import * as path from 'path';
import * as prettier from 'prettier';
import { SkyConfig } from './skyTypes';

const getFetchedFilePath = (filePath: string) =>
  filePath.slice(0, -path.extname(filePath).length) + '.fetched.ts';

export const doesFetchedMachineFileExist = (filePath: string) => {
  const pathToSave = getFetchedFilePath(filePath);
  return existsSync(pathToSave);
};

export const writeToFetchedMachineFile = async (opts: {
  filePath: string;
  skyConfig: SkyConfig;
  createTypeGenFile: (
    uriArray: string[],
    { cwd }: { cwd: string },
  ) => Promise<void>;
}) => {
  const { filePath, skyConfig } = opts;
  const prettierConfig = await prettier.resolveConfig(filePath);
  const pathToSave = getFetchedFilePath(filePath);

  const machineFile = `
  import { assign, createMachine } from 'xstate';
  
  // This file was generated by the XState CLI, please do not edit it manually.
  const workflowId = "${skyConfig.workflow.id}";

  const fetchedMachine = ${skyConfig.prettyConfigString};

  export const fetchedConfig = { workflowId, fetchedMachine };
  `;

  await fs.writeFile(
    pathToSave,
    prettier.format(machineFile, {
      ...prettierConfig,
      parser: 'typescript',
    }),
  );

  await opts.createTypeGenFile([pathToSave], { cwd: __dirname });
};
